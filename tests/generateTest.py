import json
import sys

# sample json data
# {
#    "pageName" : "About Us",
#    "pageUrl"  : "about",
#    "pageH1"   : "About Us"
# }

def generate_test_script(file_name, json_file):
    # Read JSON data from the file
    with open(json_file, 'r') as f:
        json_data = f.read()

    # Parse JSON data into a dictionary
    test_parameters = json.loads(json_data)

    # Generate the JavaScript code with substitutions
    javascript_code = f'''
//
// This file was generated by {sys.argv[0]}
//

const {{test}} = require('../fixtures');
const {{expect}} = require('@playwright/test');

test('{test_parameters["pageName"]}', async ({{ page }}) => {{

    page.setDefaultTimeout(60000);
    test.setTimeout(0) // no timeout

    try {{
        const h1Text = await page.textContent('h1');
        console.log('H1 Text (initial): ', h1Text);

        console.log('{test_parameters["pageName"]} Page is loading');

        await page.waitForSelector(':has-text("{test_parameters["pageName"]}")', {{ state: 'visible' }});
        console.log('{test_parameters["pageName"]} wait');

        // Hover over the element with text content "{test_parameters["pageName"]}"
        await page.hover(':has-text("{test_parameters["pageName"]}")');
        console.log('{test_parameters["pageName"]} hover');

        // Wait for a short period of time (e.g., 500 milliseconds) to ensure any potential hover effects are triggered
        await page.waitForTimeout(500);

        await page.click('a:has-text("{test_parameters["pageName"]}")');
        console.log('{test_parameters["pageName"]} click');

        // Wait for navigation to happen after the click
        await page.waitForNavigation({{ waitUntil: 'domcontentloaded' }});
        console.log('{test_parameters["pageName"]} navigation');

        const h1TextAfter = await page.textContent('h1');
        console.log('{test_parameters["pageName"]} h1: ', h1TextAfter);

        console.log('{test_parameters["pageName"]} Page is fully loaded');
    }} catch (error) {{
        console.error('{test_parameters["pageName"]} Page did not fully load');
    }}

    try {{
        const h1Text = await page.textContent('h1');
        await expect(h1Text).toContain('{test_parameters["pageH1"]}');
        console.log('H1 Text is correct:', h1Text);

        const currentURL = await page.evaluate(() => window.location.href);
        await expect(currentURL).toContain('{test_parameters["pageUrl"]}');
        console.log('Current URL is correct:', currentURL);

        console.log('{test_parameters["pageName"]}', 'page passed');
    }} catch (error) {{
        console.error('Assertions Error:', error);
    }}

}}, 60000);  // increase timeout to 60 seconds
'''

    # Write the JavaScript code to a file
    with open(file_name+'.spec.js', 'w') as file:
        file.write(javascript_code)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python script.py <output_file_name> <json_file>")
        sys.exit(1)

    file_name = sys.argv[1]
    json_file = sys.argv[2]

    generate_test_script(file_name, json_file)
